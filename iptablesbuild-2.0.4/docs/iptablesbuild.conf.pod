=pod

=head1 NAME

B<iptablesbuild.conf> - configuration file for iptablesbuild. Handles the detailed changes for the iptables rules. Note that this does not contain the templates for the various rules. 


=head1 DESCRIPTION

Handles the detailed changes for the iptables rules. Note that this does not contain the templates for the various rules. Uses the templates available within the iptables template direcotory (located in /etc/iptablesbuild/Templates) to construct iptables configuration files. The specific ip address information to be used for the iptables configs is handled by the iptablesbuild.conf. 


=head1 Configuring iptablesbuild

The iptablesbuild.pl script is designed to generate an iptables configuration file for a given product (system) on a Configuration Management Server. The configuration file is by default located at /etc/iptablesbuild/iptablesbuild.conf. The Templates are located by default within /etc/iptablesbuild/Templates/.

The syntax is "iptablesbuild <product_name>" to build a specific config for the given product. The configuration will be placed in /tmp/iptables.<product_name>


How Things Work

When executed to build a specific product area iptablesbuild.pl will do the following:

1. iptablesbuild opens the config file and looks for the templates_INPUT, templates_OUTPUT, and templates_POSTROUTING to tell it what templates it should use for the product area being built. NOTE: Even if not placed in the templates_x variable AllPreface_INPUT, AllPreface_OUTPUT, AllPreface_POSTROUTING, and ALLPreface_FORWARD will always be placed a the beginning of the iptables configuration, just as AllPostscript_INPUT, AllPostscript_OUTPUT, AllPostscript_POSTROUTING, and AllPostscript_FORWARD will always be placed at the end of the iptables configuration.

2. iptablesbuild then looks for defined variables in the Global Product spaces wthin the config file. The only variables it will pull from the Product configuration are those that are for the product that you wish to build. Think of the Global area as the common area for definitions that most systems will use and the product area the listing of custom things that are different from the standard system. Any word in the template files that starts with a @ will be searched for as a variable. If not found, a warning will be displayed and the line will be commented out.

3. After this is done, the combined results of the previous steps are fed into the config file located at /tmp/iptables.@product_name


=head1 The config file

=item B<Global Area>

The configuration file for iptablesbuild id located in /etc/iptablesbuild/iptablesbuild.conf. This file contains all the configuration information for all of the systems that iptablesbuild manages. Any change that is needed to be made to the iptables configuratesion will be made here. The configuration file is divided into three parts Global, Template, and Product.

The Global area is a place to store anything that is common in all or most of the iptables configurations for the various systems. This area can be thought of as the common area from cfengine. Any value here will be given to each product unless the product has a different value assigned to it in the Products section of the config file. An example segment of the Global space is show below: 

Global {
   #Product information
   #Determines a base directory for iptables files to be placed. iptables files are placed by @product_area@area@product_iptablse
   product_area=/tmp
   product_iptables=iptables

   #used in name resolution for things that only show up in the hosts as opposed to the name server. This is searched for in @product_area@area@product_hosts
   product_hosts=/common/etc/hosts

   #Generic Services
   CM_server=cm-3
   private_ranges=172.0.0.0/8 192.168.0.0/16 10.0.0.0/8
   mail_servers=mymail.mydomain.com mymail2.mydomain.com
}


Everything under the #Product information comment is required information for iptables to run proporly. There help the system determine where the iptables config files are located. The CM_server is a value intended to list the CM server managing all of the products.

product_area: defines a common location path that all managed iptables configurations branch out from ie if we use the path /cfengine/my_server/etc/sysconfig/iptables /cfengine would likely be the product_area

product_iptables: defines the location of the iptables file within each unique system. ie if we use the path /cfengine/my_server/etc/sysconfig/iptables /etc/sysconfig/iptables would be the used for the piece

area (note this is only defined in Product area, see below): defines any product specific locations. ie if we use the path /cfengine/my_server/etc/sysconfig/iptables my_server would be the used.

product_hosts: This is an experimental feature that allows for one to specify that location of the /etc/hosts file to be used for reverse name lookups. Note that the absolute path to the hosts file is defined in combination with the product_area and area variables (@product_area@area@product_hosts);


private_ranges: This is simply a variable that can be called elsewhere should it be desired that the private ranges should be allowed somthing specific.

mail_servers: This is simply a variable that can be called elsewhere should it be desired that all of the mail servers should need to connect to other rescources. if is often useful to create variables like this to allow easy removal and addition of servers that are commonly used across several systems.


=item B<Templates Area>

The Templates area holds the locations and any special paramaters for each template. A template is a small section of a iptables file containing specific ports to be opened for hosts defined for it. For example a DNS incoming template will contain a chain to allow port 53 to any hosts defined to have access from the dns_inc_permit value in the config file. 

Note that the the template section of the iptablesbuild.conf file is usually brocken off into the config file templates.conf in /etc/iptablesbuild/templates.conf
Below is a sample of the Templates section of the config file: 

Templates {
   #The Preface templates are used for all iptables configurations prefacing the given chain (ie INPUT). These files and entries are required. iptablesbuild cannot run without them. The files can b empty
   [AllPreface_INPUT]
      template=/etc/iptablesbuild/Templates/all_inc_preface.iptables
      Priority=0

   [AllPreface_OUTPUT]
      template=/etc/iptablesbuild/Templates/all_out_preface.iptables
      Priority=0

   [AllPreface_POSTROUTING]
      template=/etc/iptablesbuild/Templates/all_out_preface.iptables
      Priority=0

   [dns_inc_permit]
      template=/etc/iptablesbuild/Templates/dns_inc_permit.iptables
      Priority=10

   [dns_out_permit]
      template=/etc/iptablesbuild/Templates/dns_out_permit.iptables
      Priority=10

   #Same as the preface templates, except the postscript templates are used for the end of the iptables file. REQUIRED!
   [AllPostscript_INPUT]
      template=/etc/iptablesbuild/Templates/all_inc_postscript.iptables
      Priority=999

   [AllPostscript_OUTPUT]
      template=/etc/iptablesbuild/Templates/all_out_postscript.iptables
      Priority=999

   [AllPostscript_POSTROUTING]
      template=/etc/iptablesbuild/Templates/all_out_postscript.iptables
      Priority=999
}


Each item within a [] is an individual template. The templace itself can be called using the name between the [] in the different template variables in the Products area. The option template= tells the iptablesbuild where the template it located. The order the templates will be placed in is based on two things. Mainly Priority= should be used to determine the order the template are built in. Priority places the templates in order from 0 to infinity, if two templates have the same priority, then they will be ordered based on the order they are called. If a template has no Priority given to it, it will be given a default priority of 50.



=item B<Product Area>

The Products segment of the config file contains product specific information for each iptables file to be generated. You can think of this area as the custom area where individual iptables files are fine tuned to the specific system. Each product must be listed in order for it to be buildable. 

Products {

        [sample_web]
                #config used by hosts: sample-web


                #Local Information
                area=
                templates_INPUT=http_inc_permit https_inc_permit mysql_inc_permit
                templates_OUTPUT=@Web_out_templates

                #Incoming Access
		http_inc_permit=0.0.0.0/0
		https_inc_permit=@http_inc_permit

                ssh_inc_permit=0.0.0.0/0
                mysql_inc_permit=sample-web
                mgt_inc_permit=

                #Outgoing Access
                mgt_out_permit=@mgt_inc_permit

        [sample_database]
                #config used by hosts: sample-db


                #Local Information
                area=
                templates_INPUT=mysql_inc_permit
                templates_OUTPUT=
                
                #Yellow Network Incoming Access
                ssh_inc_permit=192.168.0.0/16
                mysql_inc_permit=
                mgt_inc_permit=@Private_ranges
        
                #Yellow Network Outgoing Access
                mgt_out_permit=@mgt_inc_permit
}

This shows several basic products for given systems. sample_Web being for a web server containing the http_inc_permit and https_inc_permit rulesets. 

You may notice the @http_inc_permit being set for the https_inc_permit variable. This means take all values in http_inc_permit and also use them for https_inc_permit

=head1 Howto's

=item B<Adding a New Product Area>

Please follow these steps for creating a new product area:

1. Open up the config file (iptablesbuild.conf) and navigate to the area within the Products { stanza.

2. Create a line for your product area something that will look similar to this:

        [sample_database]
                #config used by hosts: sample-db

                #Local Information
                area=
                templates_INPUT=mysql_inc_permit <include any INPUT templates you wish to use here>
                templates_OUTPUT=<include any OUTPUT templates you wish to use here>
                
                #Yellow Network Incoming Access
                ssh_inc_permit=192.168.0.0/16
                mysql_inc_permit=192.168.0.1
                mgt_inc_permit=@Private_ranges
        
                #Yellow Network Outgoing Access
                mgt_out_permit=@mgt_inc_permit


The name with in the [ ] is the product area name. This is the name iptablesbuild uses when you tell it to build a specific product area's config. Note that you can name this whatever you want. It is suggested that this value easily represents the system(s) it is being used for.

3. Add any extra templates to the INPUT or OUTPUT variables. To add ip addresses or ranges to them, simply set a variable that is used within the template file(Generally it is the same name as the template). (in the file above, mysql_inc_permit=192.168.0.1 is allowing the ssytem 192.168.0.1 to access the host via the standard mysql port).

5. "iptablesbuild <product name>" may now be run.

6. After this is run a iptables config file will be placed in /tmp/iptables.<product_name> or (@product_area@area@product_iptables).

7. LOOK AT THAT FILE. Make sure you put in what you really want to put in. It is also reccommend to run iptablestest against it to check for common mistakes

8. Implement that configuration file.

=item B<Adding a new template>

Template files are small chunks of an iptables config. Note that the name of the template file will be used to create a new chain for your template to work within. Templates are generally located in /etc/iptablesbuild/Templates directory; put yours there.

A template should look similar to this:



#################################################################### 
## MySQL Incoming
#  

#Chain Access 
-A INPUT -i eth+ -p tcp -m tcp --dport 3306 -j mysql_inc_permit  

#Chain Rules 
-A mysql_inc_permit -s @mysql_inc_permit -j ACCEPT 
-A mysql_inc_permit -j LOG --log-prefix "IPTABLES Inc mysql-attempt:" 
-A mysql_inc_permit -j DROP 




a few things to keep in mind when building your template:

1. Anything with an @ in front is treated as a variable. It is suggested that you have at least one variable that is the same name as your template. This makes it easier for the rest of us.

2. Keep in mind that this template can use any of the Global variables you declare (ie cm_server, nfs_servers, etc).



After you have build your template you will need to add it to the config file with a stanza like this within the Templates { brackets:

[mysql_inc_permit]
  template=/etc/iptablesbuild/Templates/mysql_inc_permit.iptables
  Priority=30

Note that the name in [ ] is the name that products will refur to your template with.
The Priority option is used for the ordering of your template the higher the number the closer to the end of the configuration file it will be.

You may now include your template in whatever products you choose.


=item B<Modifying an exsisting iptables configuration>

1. Open /etc/iptablesbuild/iptablesbuild.conf

2. Find the product area you would like to modify (it is the name in between [ ] marks in the Products area)

3. If you wish to add a template to the config, add them to templates_INPUT, templates_OUTPUT, or templates_POSTROUTING depending on what type of template you are adding.

4. Add whatever hostnames/ipaddresses/ip ranges you need to the variable that corrisponds with the template you wish to use. (note: this variable can also be stored as a global variable defined at the top of the config file inside Global { })

5. save and exit the file

7. Run the command iptablesbuild <product name> (This will generate a iptables config file, the path to it will be listed in the output)

8. Take a look at the newly generated config file(Make sure it did what you wanted). It is also reccommended to run iptablestest against it to check for common mistakes.

9. implement the config file.


=item B<Tips>

1. If you do not want a variable to have any value, set it equal to nothing (ie smtp_inc_permit= ) in the config file. If this is done a warning will not be displayed when building the product.

2. When adding hosts to the config files variables, use the hostname as opposed to the ip address. This way the config file will be easier to read.

3. In the iptablesbuild.conf file you can set variables equal to each other. (ie mysql_inc_permit=@mysql_out_permit. This will append all values of mysql_out_permit into mysql_inc_permit)

4. Note that there are pre-defined sets for different types of machines(ie Web servers, Database Servers, etc). These variables can be appended onto the templates_INPUT, templates_OUTPUT, and templates_POSTROUTING variables. 



=head1 ALSO SEE

=item B<iptablestest, iptablesbuild>

